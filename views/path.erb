  <div id="container" style="height:100%;"></div>
  <script src="./sigma.min.js"></script>
  <script src="./plugins/sigma.renderers.customShapes.min.js"></script>
  <script src="./plugins/sigma.layout.forceAtlas2.min.js"></script>
  <script>
var random_id = function() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
      return v.toString(16);
      });
};


sigma.utils.pkg('sigma.canvas.nodes');
console.log( ShapeLibrary.enumerate() );

var  g = {
      nodes: [],
      edges: []
    };

var existingNodes = new Set();
var x = 0;
var y = 0;
<% @paths.each do |id, path| %> 
  y+=1;
  x=0;
  var prev = null;
  <% path.each do |img| %>
    x+=2;
    if(!existingNodes.has('<%=img.rmn_id%>')) {
      node = {
      // Main attributes:
id: '<%= img.rmn_id %>',
      // Display attributes:
      x: x,
      y: y,
      size: 8,
      type: 'circle',
      image: {
url: '<%= img.url %>',
      clip: 1,
        scale: 1.6,
      }
      };
          
      g.nodes.push(node);
      existingNodes.add('<%=img.rmn_id%>');
      }

      if (prev != null) {
            edge = {
   id: random_id(),
    source: prev,
    label: "couocou",
    target: '<%= img.rmn_id %>',
    type: 'curvedArrow',
    size: 0.1
            }
            g.edges.push(edge);
          };
prev = '<%= img.rmn_id %>';
        <% end %>
      <% end %>

s = new sigma({
  graph: g,
  renderer: {
    // IMPORTANT:
    // This works only with the canvas renderer, so the
    // renderer type set as "canvas" is necessary here.
    container: document.getElementById('container'),
    type: 'canvas'
  },
  settings: {
    maxNodeSize: 40,
    maxEdgeSize: 5,
    labelThreshold: 1,
    defaultLabelColor: '#F00'
  }
});
    // Finally, let's ask our sigma instance to refresh:
    CustomShapes.init(s);
    s.refresh();
    //s.startForceAtlas2({worker: true, barnesHutOptimize: false});

  </script>


